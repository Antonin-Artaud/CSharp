// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(17)
            {
                { typeof(global::ProtocolShared.Commands.Entity.PlayerState), 0 },
                { typeof(global::ProtocolShared.Commands.Entity.GameEntity), 1 },
                { typeof(global::ProtocolShared.Commands.AuthenticationCommand), 2 },
                { typeof(global::ProtocolShared.Commands.AuthenticationSuccessCommand), 3 },
                { typeof(global::ProtocolShared.Commands.CreateRoomRequestCommand), 4 },
                { typeof(global::ProtocolShared.Commands.CreateRoomResponseCommand), 5 },
                { typeof(global::ProtocolShared.Commands.Entity.DoorEntity), 6 },
                { typeof(global::ProtocolShared.Commands.Entity.EntityDataCommand), 7 },
                { typeof(global::ProtocolShared.Commands.Entity.EntityRemovedCommand), 8 },
                { typeof(global::ProtocolShared.Commands.Entity.PlayerEntity), 9 },
                { typeof(global::ProtocolShared.Commands.JoinRoomRequestCommand), 10 },
                { typeof(global::ProtocolShared.Commands.JoinRoomResponseCommand), 11 },
                { typeof(global::ProtocolShared.Commands.KeepAliveCommand), 12 },
                { typeof(global::ProtocolShared.Commands.KeepAliveServerCommand), 13 },
                { typeof(global::ProtocolShared.Commands.KillPlayerCommand), 14 },
                { typeof(global::ProtocolShared.Commands.MovePlayerCommand), 15 },
                { typeof(global::ProtocolShared.Commands.OpenDoorCommand), 16 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity.PlayerStateFormatter();
                case 1: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity.GameEntityFormatter();
                case 2: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.AuthenticationCommandFormatter();
                case 3: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.AuthenticationSuccessCommandFormatter();
                case 4: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.CreateRoomRequestCommandFormatter();
                case 5: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.CreateRoomResponseCommandFormatter();
                case 6: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity.DoorEntityFormatter();
                case 7: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity.EntityDataCommandFormatter();
                case 8: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity.EntityRemovedCommandFormatter();
                case 9: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity.PlayerEntityFormatter();
                case 10: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.JoinRoomRequestCommandFormatter();
                case 11: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.JoinRoomResponseCommandFormatter();
                case 12: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.KeepAliveCommandFormatter();
                case 13: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.KeepAliveServerCommandFormatter();
                case 14: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.KillPlayerCommandFormatter();
                case 15: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.MovePlayerCommandFormatter();
                case 16: return new MessagePack.Formatters.Akatsuki.Protocol.Commands.OpenDoorCommandFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class PlayerStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.Entity.PlayerState>
    {
        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.Entity.PlayerState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::ProtocolShared.Commands.Entity.PlayerState Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::ProtocolShared.Commands.Entity.PlayerState)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class GameEntityFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.Entity.GameEntity>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public GameEntityFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::ProtocolShared.Commands.Entity.DoorEntity).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::ProtocolShared.Commands.Entity.PlayerEntity).TypeHandle, new KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.Entity.GameEntity value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.DoorEntity>().Serialize(ref writer, (global::ProtocolShared.Commands.Entity.DoorEntity)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.PlayerEntity>().Serialize(ref writer, (global::ProtocolShared.Commands.Entity.PlayerEntity)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::ProtocolShared.Commands.Entity.GameEntity Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Akatsuki.Protocol.Commands.Entity.GameEntity");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::ProtocolShared.Commands.Entity.GameEntity result = null;
            switch (key)
            {
                case 0:
                    result = (global::ProtocolShared.Commands.Entity.GameEntity)options.Resolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.DoorEntity>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::ProtocolShared.Commands.Entity.GameEntity)options.Resolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.PlayerEntity>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Akatsuki.Protocol.Commands
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AuthenticationCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.AuthenticationCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.AuthenticationCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.UserId);
        }

        public global::ProtocolShared.Commands.AuthenticationCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __UserId__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __UserId__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.AuthenticationCommand();
            ____result.UserId = __UserId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AuthenticationSuccessCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.AuthenticationSuccessCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.AuthenticationSuccessCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::ProtocolShared.Commands.AuthenticationSuccessCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.AuthenticationSuccessCommand();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateRoomRequestCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.CreateRoomRequestCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.CreateRoomRequestCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomId, options);
        }

        public global::ProtocolShared.Commands.CreateRoomRequestCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RoomId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.CreateRoomRequestCommand();
            ____result.RoomId = __RoomId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateRoomResponseCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.CreateRoomResponseCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.CreateRoomResponseCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Success);
        }

        public global::ProtocolShared.Commands.CreateRoomResponseCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Success__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Success__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.CreateRoomResponseCommand();
            ____result.Success = __Success__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinRoomRequestCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.JoinRoomRequestCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.JoinRoomRequestCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomId, options);
        }

        public global::ProtocolShared.Commands.JoinRoomRequestCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RoomId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.JoinRoomRequestCommand();
            ____result.RoomId = __RoomId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinRoomResponseCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.JoinRoomResponseCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.JoinRoomResponseCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Success);
        }

        public global::ProtocolShared.Commands.JoinRoomResponseCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Success__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Success__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.JoinRoomResponseCommand();
            ____result.Success = __Success__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class KeepAliveCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.KeepAliveCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.KeepAliveCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::ProtocolShared.Commands.KeepAliveCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.KeepAliveCommand();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class KeepAliveServerCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.KeepAliveServerCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.KeepAliveServerCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::ProtocolShared.Commands.KeepAliveServerCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.KeepAliveServerCommand();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class KillPlayerCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.KillPlayerCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.KillPlayerCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.EntityId);
        }

        public global::ProtocolShared.Commands.KillPlayerCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.KillPlayerCommand();
            ____result.EntityId = __EntityId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MovePlayerCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.MovePlayerCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.MovePlayerCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.X);
            writer.Write(value.Y);
        }

        public global::ProtocolShared.Commands.MovePlayerCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __X__ = default(float);
            var __Y__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __X__ = reader.ReadSingle();
                        break;
                    case 1:
                        __Y__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.MovePlayerCommand();
            ____result.X = __X__;
            ____result.Y = __Y__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class OpenDoorCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.OpenDoorCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.OpenDoorCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.DoorId);
        }

        public global::ProtocolShared.Commands.OpenDoorCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __DoorId__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __DoorId__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.OpenDoorCommand();
            ____result.DoorId = __DoorId__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Akatsuki.Protocol.Commands.Entity
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DoorEntityFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.Entity.DoorEntity>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.Entity.DoorEntity value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.Id);
            writer.Write(value.OwnerId);
            writer.Write(value.IsOpen);
            writer.Write(value.DoorId);
        }

        public global::ProtocolShared.Commands.Entity.DoorEntity Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __IsOpen__ = default(bool);
            var __DoorId__ = default(uint);
            var __Id__ = default(uint);
            var __OwnerId__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 2:
                        __IsOpen__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __DoorId__ = reader.ReadUInt32();
                        break;
                    case 0:
                        __Id__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __OwnerId__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.Entity.DoorEntity();
            ____result.IsOpen = __IsOpen__;
            ____result.DoorId = __DoorId__;
            ____result.Id = __Id__;
            ____result.OwnerId = __OwnerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityDataCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.Entity.EntityDataCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.Entity.EntityDataCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.GameEntity>().Serialize(ref writer, value.Entity, options);
        }

        public global::ProtocolShared.Commands.Entity.EntityDataCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Entity__ = default(global::ProtocolShared.Commands.Entity.GameEntity);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        __Entity__ = formatterResolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.GameEntity>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.Entity.EntityDataCommand();
            ____result.Entity = __Entity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityRemovedCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.Entity.EntityRemovedCommand>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.Entity.EntityRemovedCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.EntityId);
        }

        public global::ProtocolShared.Commands.Entity.EntityRemovedCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __EntityId__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __EntityId__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.Entity.EntityRemovedCommand();
            ____result.EntityId = __EntityId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerEntityFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProtocolShared.Commands.Entity.PlayerEntity>
    {

        public void Serialize(ref MessagePackWriter writer, global::ProtocolShared.Commands.Entity.PlayerEntity value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.Id);
            writer.Write(value.OwnerId);
            formatterResolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.PlayerState>().Serialize(ref writer, value.State, options);
            writer.Write(value.X);
            writer.Write(value.Y);
        }

        public global::ProtocolShared.Commands.Entity.PlayerEntity Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __State__ = default(global::ProtocolShared.Commands.Entity.PlayerState);
            var __X__ = default(float);
            var __Y__ = default(float);
            var __Id__ = default(uint);
            var __OwnerId__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 2:
                        __State__ = formatterResolver.GetFormatterWithVerify<global::ProtocolShared.Commands.Entity.PlayerState>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __X__ = reader.ReadSingle();
                        break;
                    case 4:
                        __Y__ = reader.ReadSingle();
                        break;
                    case 0:
                        __Id__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __OwnerId__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ProtocolShared.Commands.Entity.PlayerEntity();
            ____result.State = __State__;
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Id = __Id__;
            ____result.OwnerId = __OwnerId__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

